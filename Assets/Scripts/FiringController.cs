using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using UnityEngine.VFX;

[Serializable]
public class WeaponAttributes
{
    [Tooltip("The flat damage of the weapon")]
    public float damage;
    [Tooltip("The flat firing rate of the weapon per second")]
    public float fireRate;
    [Tooltip("The amount of heat generated by each shot of the weapon")]
    public float heatGeneration;
    [Tooltip("The maximum heat-value before the weapon needs to cool")]
    public float heatMaximum;
    [Tooltip("The time needed for the weapon to START cooling")]
    public float coolingIntializeTime;
    [Tooltip("The rate at which the weapon cools after intitializing a cooling")]
    public float coolingRate;
    [Tooltip("The general disarray of accuracy whilst shooting, ramps up as the player shoots consecutively, higher value means a more innacuracte standard for the weapon")]
    public float accuracy;
}

public class FiringController : MonoBehaviour
{
    [SerializeField] public WeaponAttributes weaponAttributes = new WeaponAttributes();
    [SerializeField] private Camera bulletCam = null;
    [SerializeField] private GameObject hitEffect = null;
    [SerializeField] private GameObject overheatBar = null;
    [SerializeField] private VisualEffect muzzleFlash = null;
    private float timeToFire = 0f;
    private bool overheated = false;

    void Update()
    {
        CheckFire();
    }

    void CheckFire()
    {
        if (Input.GetButton("Fire1") && Time.time >= timeToFire && overheated == false)
        {
            
            muzzleFlash.Play();
            timeToFire = Time.time + 1f / weaponAttributes.fireRate;
            FireWeapon();
        }
    }

    void FireWeapon()
    {
        //accuracy applied
        Vector3 direction = bulletCam.transform.forward;
        direction.x += UnityEngine.Random.Range(-weaponAttributes.accuracy, weaponAttributes.accuracy);
        direction.y += UnityEngine.Random.Range(-weaponAttributes.accuracy, weaponAttributes.accuracy);
        direction.z += UnityEngine.Random.Range(-weaponAttributes.accuracy, weaponAttributes.accuracy);
        RaycastHit bulletHit;
        if (Physics.Raycast(bulletCam.transform.position, direction, out bulletHit))
        {
            //draw accuracy line
            Debug.DrawLine(bulletCam.transform.position, bulletHit.point, Color.green, 1.5f);
            TargetScript target = bulletHit.transform.GetComponent<TargetScript>();
            if(target != null)
            {
                target.TakeDamage(weaponAttributes.damage);
            }
            GameObject impact = Instantiate(hitEffect, bulletHit.point + bulletHit.normal * 0.2f, Quaternion.LookRotation(bulletHit.normal));
            Destroy(impact, 2f);
        }

        overheatBar.GetComponent<OverheatScript>().Heat(weaponAttributes.heatGeneration);

    }

    public void Overheated()
    {
        overheated = true;
    }

    public void Cooled()
    {
        overheated = false;
    }
}
